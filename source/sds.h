/*
 * $ Copyright YEAR Cypress Semiconductor $
 */

/**
 * file sds.h
 *
 * BT management header file
 *
 */

#ifndef SDS_H__
#define SDS_H__

#include "hidd_lib.h"
#include "wiced_timer.h"

#if is_SDS_capable && (SLEEP_ALLOWED > 1)

 #include "clock_timer.h"

typedef OSAPI_TIMER sds_timer_t;
 wiced_result_t sds_timer_stop( sds_timer_t* p_timer);
 wiced_result_t sds_timer_start( sds_timer_t* p_timer, uint32_t timeout);
 wiced_result_t sds_timer_stop( sds_timer_t* p_timer);
 wiced_result_t sds_timer_init( sds_timer_t* p_timer, wiced_timer_callback_t p_cb, uint8_t param);
 #define sds_timer_in_use(t) osapi_is_timer_running(t)

/////////////////////////////////////////////////////////////////////////////////
/// sds_wake
///   This function handles wake up from SDS
/////////////////////////////////////////////////////////////////////////////////
void sds_wake();

/////////////////////////////////////////////////////////////////////////////////
/// sds_link_up
///   This function is called when link is up
/////////////////////////////////////////////////////////////////////////////////
void sds_link_up();

/////////////////////////////////////////////////////////////////////////////////
/// sds_link_down
///   This function is called when link is down
/////////////////////////////////////////////////////////////////////////////////
void sds_link_down();

/////////////////////////////////////////////////////////////////////////////////
/// sds_allowed_in_ms
///   After calling this function, SDS is prohibitted until the timer expires
/////////////////////////////////////////////////////////////////////////////////
void sds_allowed_in_ms(uint32_t allow_sds_in_ms);

/////////////////////////////////////////////////////////////////////////////////
/// sds_is_allowed
///   return TRUE when SDS is allowed
/////////////////////////////////////////////////////////////////////////////////
wiced_bool_t sds_is_allowed();

/////////////////////////////////////////////////////////////////////////////////
/// sds_set_allowed
///   Set SDS mode, allowed or not
/////////////////////////////////////////////////////////////////////////////////
void sds_set_allowed(wiced_bool_t);

/////////////////////////////////////////////////////////////////////////////////
/// sds_attemped
///   Return true if tried to enter SDS before
/////////////////////////////////////////////////////////////////////////////////
wiced_bool_t sds_attempted();

/////////////////////////////////////////////////////////////////////////////////
/// restore data from aon, this function should called right after wake from SDS
/////////////////////////////////////////////////////////////////////////////////
void sds_restore_data_from_aon();

/////////////////////////////////////////////////////////////////////////////////
/// sds_save_data_to_aon
///   This function is called before entering SDS to save data to AON
/////////////////////////////////////////////////////////////////////////////////
void sds_save_data_to_aon();

/////////////////////////////////////////////////////////////////////////////////
/// sds_init
///   This function is called once and only once at start up
/////////////////////////////////////////////////////////////////////////////////
void sds_init();

 #ifdef FILTER_ACCEPT_LIST_FOR_ADVERTISING
/////////////////////////////////////////////////////////////////////////////////
/// sds_set_filtering_adv
///   Set the adv filtering state in AON memory so waking up from SDS can resume
///   the advertisement.
/////////////////////////////////////////////////////////////////////////////////
void sds_set_filtering_adv(wiced_bool_t enable, uint8_t * addr);
 #else
  #define sds_set_filtering_adv(en, ad)
 #endif

#else // is_SDS_capable && (SLEEP_ALLOWED > 1)

 typedef wiced_timer_t sds_timer_t;
 #define sds_timer_stop(t) wiced_stop_timer(t)
 #define sds_timer_start(t, d) wiced_start_timer(t, d)
 #define sds_timer_in_use(t) wiced_is_timer_in_use(t)
 #define sds_timer_init(t, cb, p) wiced_init_timer(t, cb, p, WICED_MILLI_SECONDS_TIMER)

 #define sds_wake()
 #define sds_link_up()
 #define sds_link_down()
 #define sds_init()
 #define sds_allowed_in_ms(ms)
 #define sds_is_allowed() (TRUE)
 #define sds_set_allowed(t)
 #define sds_set_filtering_adv(en, ad)

#endif // is_SDS_capable && (SLEEP_ALLOWED > 1)

#endif // SDS_H__
